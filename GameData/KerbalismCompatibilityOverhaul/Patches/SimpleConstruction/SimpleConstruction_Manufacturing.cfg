// Define RocketParts early so Kerbalism recognizes it
RESOURCE_DEFINITION
{
name = RocketParts
	displayName = #EL_RocketParts-name
	abbreviation = #SCON-RocketParts-abbv
	hsp = 450
	density = 0.0025
	unitCost = 1.5
	flowMode = ALL_VESSEL
	transfer = PUMP
	isTweakable = true
	isVisible = true
	volume = 5
	color = 192,192,192	
}

// So this is a bit of a weird one. We want the process to run faster if we have more Kerbals on board, so we add a dummy resource that Kerbals passively produce and use that as the limiting factor for the manufacturing process.
RESOURCE_DEFINITION
{
  name = KerbalHours		// Represents the amount of work one Kerbal can do in an hour
  displayName = Kerbal-Hours
  density = 0.0
  unitCost = 0.0
  flowMode = ALL_VESSEL
  transfer = NONE
  isTweakable = false
  isVisible = false
  volume = 1
}

Profile
{
	name = KerbalismSupport
	modname = SimpleConstruction!
	moddir = SimpleConstruction

	Rule
	{
		name = kerbal productivity
		title = fidgeting		// Seems harmless enough, letting the Kerbals fidget sometimes keeps them sane and focused.
		input = ElectricCharge		// I'd rather it not consume anything, but since it has to, we consume a tiny trickle of EC.
		output = KerbalHours
		ratio = 0.27778
		rate = 0.001			// Consumes 0.001 EC/s to produce 0.00027778 Kerbal-Hours of work per second
		individuality = 0.25		// Some Kerbals are more (or less) productive than other Kerbals.
		degeneration = 0.00000000463	// Inordinately long amount of time, realistically this shouldn't ever happen
		breakdown = true
		warning_message = $ON_VESSEL$KERBAL is getting distracted
		danger_message = $ON_VESSEL$KERBAL isn't showing up for work
		relax_message = $ON_VESSEL$KERBAL is back at work
	}

	Process
	{
		name = part assembly
		title = part assembly
		modifier = _PartAssembly
    		input = ElectricCharge@0.23		// Energy consumption for tools and things
		input = KerbalHours@0.00027778		// Requires a Kerbal's Kerbal-Hours output to run each instance of manufacturing.
    		input = Metal@0.00031746		// Metal is roughly 3x as dense, so we get a lot more parts than we use Metal
		output = RocketParts@0.001		// One Kerbal takes 17 minutes to make 2.5 kg of parts
	}
}

@PART[*]:HAS[@MODULE[Laboratory]]:NEEDS[ProfileDefault,SimpleConstruction]:AFTER[SimpleConstruction]
{

	MODULE
	{
		name = ProcessController
		resource = _PartAssembly
		title = Part assembly
		capacity = 1
	}

	MODULE
	{
		name = Configure
		title = Part Workshop
		slots = 1

		SETUP
		{
			name = Part Assembly
			desc = Manufacture <b>RocketParts</b> from raw <b>Metal</b> by allowing the crew access to the toolbox marked "Highly Dangerous"
			tech = advScienceTech
			cost = 2500			// Tools are expensive
			mass = 1.03			// ...and heavy

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _PartAssembly
			}

			RESOURCE
			{
				name = Productivity
				amount = 0
				maxAmount = 0
			}
		}
		SETUP
		{
			name = None
			desc = Empty slot for mass and cost savings, should you not want a highly dangerous toolbox on board.
		}
	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = ProcessController
		title = Part Workshop
		repair = Engineer
		mtbf = 72576000
		extra_cost = 2.5
		extra_mass = 1.0
	}
}

// Apparently SimpleConstruction applies the ModuleResourceConverter later if Kerbalism is installed, so we need to remove it far later than usual
@PART[*]:HAS[@MODULE[Laboratory]]:NEEDS[ProfileDefault,SimpleConstruction]:LAST[zSimpleConstruction]
{
	!MODULE[ModuleResourceConverter],* {}
}

@PART[Large_Crewed_Lab]:NEEDS[ProfileDefault,SimpleConstruction]:AFTER[SimpleConstruction]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 4.0      // Up to 4 Kerbals can work manufacturing in the lab
  }
}

RESOURCE_DEFINITION
{
  name = _PartAssembly
  density = 0.0
  isVisible = false
}

